#!/usr/bin/env ruby
require 'curses'

# 末尾再帰最適化を有効化する。
RubyVM::InstructionSequence.compile_option = {
  tailcall_optimization: true,
  trace_instruction: false
}

require 'pp'
require_relative 'translator'

require 'readline'
require_relative 'cl'
require_relative 'sb_ext'
require_relative 'ql'
include CL

require 'optparse'
require 'ostruct'

require_relative 'reader'

require_relative 'format'

module Cl2rb
  module_function

  def translate_file(filename)
    program = Reader.read_all(File.read(filename))

    program.each do |sexp|
      puts $translator.translate(sexp)
      puts
    end
  end

  def main
    $translator = Translator.new

    opts = OpenStruct.new
    opts.mode = :repl
    OptionParser.new do |parser|
      parser.banner = "Usage: cl2rb"
      parser.on("-l", "--load LISP_FILE", "Load Lisp file") do |file|
        opts.load_file = file
      end

      parser.on("-s", "--script LISP_FILE", "Load Lisp file and exit") do |file|
        opts.load_file = file
        opts.mode = :script
      end

      parser.on("-t", "--translate LISP_FILE", "Translate Lisp to Ruby") do |file|
        opts.load_file = file
        opts.mode = :translate
      end
    end.parse!(ARGV)

    case opts.mode
    when :repl
      opts.load_file and CL.load(opts.load_file)
      repl
    when :script
      CL.load(opts.load_file)
      exit 0
    when :translate
      translate_file(opts.load_file)
    end
  end

  RECORD_HISTORY = true

  def repl
    prompt = "> "
    buf = ""
    while line = Readline.readline(prompt, RECORD_HISTORY)
      buf += line
      begin
        sexp = Reader::read_sexp(buf)
        buf = ""
        prompt = "> "
      rescue  Reader::PrematureEndException
        prompt = "*   "
        next
      end
      rb = $translator.translate(sexp)
      begin
        value = Kernel.eval(rb, $global_scope, "(repl)")
        puts
        puts CL.print1(value)
      rescue => e
        if e.message.empty?
          m = "unhandled exception"
        else
          m = "#{e.message} (#{e.class.to_s})"
        end
        e.backtrace.each.with_index do |line, i|
          if i==0
            puts line + ": " + m
          else
            puts line
          end
        end
      end
    end
    puts "\nBye."
  end
end

$global_scope = binding

if __FILE__ == $0
  Cl2rb.main
end
